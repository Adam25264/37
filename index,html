<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>SmartTendance - Student Portal</title>
    
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-database-compat.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.js"></script>
    <!-- Stripe.js for card payments -->
    <script src="https://js.stripe.com/v3/"></script>
    <!-- Paystack Inline JS -->
    <script src="https://js.paystack.co/v1/inline.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Firebase Configuration -->
    <script>
        const firebaseConfig = {
            apiKey: "AIzaSyBN0KexNQkEegTvAUA815xJrBqPUa45SOk",
            authDomain: "smarttendance-a355b.firebaseapp.com",
            databaseURL: "https://smarttendance-a355b-default-rtdb.europe-west1.firebasedatabase.app",
            projectId: "smarttendance-a355b",
            storageBucket: "smarttendance-a355b.firebasestorage.app",
            messagingSenderId: "448589697375",
            appId: "1:448589697375:web:d5b02d378ba9746a68a6ea"
        };

        const app = firebase.initializeApp(firebaseConfig);
        const database = firebase.database();
        console.log("Firebase initialized successfully!");
    </script>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Arial, sans-serif;
            -webkit-tap-highlight-color: transparent;
        }
        
        :root {
            --primary: #44ff44;
            --secondary: #3366cc;
            --danger: #ff4444;
            --warning: #ffaa00;
            --success: #10b981;
            --dark: #121212;
            --darker: #0a0a0a;
            --light: #f5f5f5;
            --card-bg: #1a1a1a;
            --card-border: #333;
            --text-primary: #ffffff;
            --text-secondary: #cccccc;
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3);
        }
        
        body {
            background: var(--dark);
            color: var(--text-primary);
            min-height: 100vh;
            overflow-x: hidden;
            transition: all 0.3s ease;
            padding-bottom: 80px;
        }
        
        body.light-mode {
            --primary: #2563eb;
            --secondary: #3b82f6;
            --danger: #ef4444;
            --success: #10b981;
            --warning: #f59e0b;
            --dark: #f8fafc;
            --darker: #e2e8f0;
            --light: #ffffff;
            --card-bg: #ffffff;
            --card-border: #e2e8f0;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
        
        .app-container {
            max-width: 100%;
            margin: 0 auto;
            padding-bottom: 80px;
        }
        
        /* Enhanced Header for Mobile */
        .header {
            background: linear-gradient(135deg, var(--darker) 0%, var(--card-bg) 100%);
            padding: 15px;
            text-align: center;
            border-bottom: 1px solid var(--card-border);
            position: sticky;
            top: 0;
            z-index: 100;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 10px;
        }
        
        .header-content {
            flex: 1;
            text-align: left;
        }
        
        .header h1 {
            color: var(--primary);
            font-size: 20px;
            margin-bottom: 2px;
            text-align: left;
        }
        
        .student-info {
            font-size: 12px;
            color: var(--text-secondary);
        }
        
        .header-controls {
            display: flex;
            gap: 8px;
        }
        
        .theme-toggle, .settings-toggle, .new-course-toggle {
            background: var(--card-bg);
            border: 1px solid var(--card-border);
            color: var(--text-secondary);
            font-size: 16px;
            cursor: pointer;
            padding: 8px;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s;
            box-shadow: var(--shadow);
        }
        
        .theme-toggle:hover, .settings-toggle:hover, .new-course-toggle:hover {
            color: var(--primary);
            transform: translateY(-2px);
        }
        
        /* Enhanced Bottom Navigation */
        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: var(--card-bg);
            border-top: 1px solid var(--card-border);
            display: flex;
            padding: 8px 5px;
            z-index: 1000;
        }
        
        .nav-item {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 8px 5px;
            background: none;
            border: none;
            color: var(--text-secondary);
            font-size: 11px;
            cursor: pointer;
            transition: all 0.3s;
            border-radius: 10px;
            min-height: 50px;
        }
        
        .nav-item.active {
            color: var(--primary);
            background: rgba(68, 255, 68, 0.1);
        }
        
        .nav-item i {
            font-size: 18px;
            margin-bottom: 4px;
        }
        
        .nav-item .nav-label {
            font-size: 10px;
            font-weight: 500;
        }
        
        /* Tab Content */
        .tab-content {
            display: none;
            padding: 15px;
        }
        
        .tab-content.active {
            display: block;
        }
        
        /* Improved Scanner Section for Mobile */
        .scanner-section {
            text-align: center;
        }
        
        .scanner-box {
            background: var(--card-bg);
            border-radius: 15px;
            padding: 15px;
            margin: 15px 0;
            border: 2px solid var(--card-border);
            box-shadow: var(--shadow);
        }
        
        .camera-container {
            width: 100%;
            max-width: 300px;
            height: 280px;
            margin: 0 auto 15px;
            border: 3px solid var(--primary);
            border-radius: 10px;
            overflow: hidden;
            background: #000;
            position: relative;
        }
        
        #video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .scan-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }
        
        .scan-line {
            position: absolute;
            width: 100%;
            height: 3px;
            background: var(--primary);
            animation: scan 2s infinite;
            box-shadow: 0 0 10px var(--primary);
        }
        
        @keyframes scan {
            0% { top: 0; }
            50% { top: 100%; }
            100% { top: 0; }
        }
        
        .scanner-controls {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-top: 15px;
        }
        
        .btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 14px;
            border-radius: 10px;
            font-size: 15px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            width: 100%;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 15px rgba(37, 99, 235, 0.3);
        }
        
        .btn:disabled {
            background: var(--text-secondary);
            color: var(--text-primary);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .btn-secondary {
            background: var(--secondary);
        }
        
        .btn-danger {
            background: var(--danger);
        }
        
        .btn-warning {
            background: var(--warning);
        }
        
        .btn-small {
            padding: 10px 12px;
            font-size: 13px;
            width: auto;
            margin: 2px;
        }
        
        /* Trial Info Banner */
        .trial-banner {
            background: linear-gradient(135deg, #000000 0%, #333333 50%, #ffffff 100%);
            color: white;
            padding: 12px;
            border-radius: 10px;
            margin: 12px 0;
            text-align: center;
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 8px;
            border-left: 5px solid #ffffff;
        }
        
        .banner-content {
            flex: 1;
            text-align: left;
        }
        
        .banner-content h3 {
            margin-bottom: 4px;
            font-size: 14px;
        }
        
        .banner-content p {
            font-size: 12px;
            opacity: 0.9;
        }
        
        .trial-progress {
            height: 6px;
            background: var(--darker);
            border-radius: 4px;
            margin: 8px 0;
            overflow: hidden;
        }
        
        .trial-progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #000000 0%, #333333 50%, #ffffff 100%);
            border-radius: 4px;
            transition: width 0.5s ease;
        }
        
        .trial-days {
            display: flex;
            justify-content: space-between;
            font-size: 11px;
            color: var(--text-secondary);
        }
        
        /* History Header */
        .history-header {
            display: flex;
            flex-direction: column;
            gap: 12px;
            margin-bottom: 15px;
        }
        
        .history-title-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .history-filters {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }
        
        .filter-select {
            flex: 1;
            min-width: 120px;
            padding: 10px;
            border-radius: 8px;
            background: var(--darker);
            color: var(--text-primary);
            border: 1px solid var(--card-border);
            font-size: 13px;
        }
        
        /* Enhanced Summary Table for Mobile */
        .summary-section {
            margin-bottom: 20px;
        }
        
        .summary-table {
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
            background: var(--card-bg);
            border-radius: 10px;
            overflow: hidden;
            box-shadow: var(--shadow);
            font-size: 13px;
        }
        
        .summary-table th, .summary-table td {
            padding: 10px 8px;
            text-align: left;
            border-bottom: 1px solid var(--card-border);
            border-right: 1px solid var(--card-border);
        }
        
        .summary-table th:last-child, .summary-table td:last-child {
            border-right: none;
        }
        
        .summary-table th {
            background: var(--darker);
            color: var(--text-primary);
            font-weight: bold;
        }
        
        .summary-table tr:last-child td {
            border-bottom: none;
        }
        
        .summary-table tr:hover {
            background: rgba(37, 99, 235, 0.05);
        }
        
        /* Enhanced Tabular Attendance History for Mobile */
        .attendance-table-container {
            margin-top: 15px;
            overflow-x: auto;
            border-radius: 10px;
            box-shadow: var(--shadow);
            -webkit-overflow-scrolling: touch;
        }
        
        .attendance-table {
            width: 100%;
            border-collapse: collapse;
            background: var(--card-bg);
            font-size: 12px;
            min-width: 500px;
        }
        
        .attendance-table th {
            background: var(--darker);
            color: var(--text-primary);
            font-weight: bold;
            padding: 12px 8px;
            text-align: left;
            border-bottom: 2px solid var(--card-border);
            border-right: 1px solid var(--card-border);
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        .attendance-table th:last-child {
            border-right: none;
        }
        
        .attendance-table td {
            padding: 10px 8px;
            border-bottom: 1px solid var(--card-border);
            border-right: 1px solid var(--card-border);
            color: var(--text-secondary);
        }
        
        .attendance-table td:last-child {
            border-right: none;
        }
        
        .attendance-table tr:last-child td {
            border-bottom: none;
        }
        
        .attendance-table tr:hover {
            background: rgba(37, 99, 235, 0.05);
        }
        
        .status-present {
            color: var(--success);
            font-weight: bold;
        }
        
        .status-absent {
            color: var(--danger);
            font-weight: bold;
        }
        
        .action-cell {
            text-align: center;
        }
        
        .delete-record-btn {
            background: var(--danger);
            color: white;
            border: none;
            border-radius: 5px;
            padding: 6px 8px;
            cursor: pointer;
            font-size: 11px;
            transition: all 0.3s;
        }
        
        .delete-record-btn:hover {
            background: #dc2626;
            transform: scale(1.05);
        }
        
        /* Enhanced Subscription Section for Mobile */
        .subscription-card {
            background: var(--card-bg);
            border-radius: 15px;
            padding: 15px;
            margin: 15px 0;
            border: 2px solid var(--primary);
            box-shadow: var(--shadow);
        }
        
        .subscription-info {
            margin: 12px 0;
        }
        
        .subscription-row {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid var(--card-border);
            font-size: 14px;
        }
        
        .payment-options {
            display: flex;
            flex-direction: column;
            gap: 8px;
            margin: 15px 0;
        }
        
        .payment-option {
            display: flex;
            align-items: center;
            padding: 12px;
            background: var(--card-bg);
            border: 1px solid var(--card-border);
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .payment-option:hover {
            background: rgba(37, 99, 235, 0.1);
            border-color: var(--primary);
        }
        
        .payment-icon {
            margin-right: 12px;
            font-size: 20px;
            color: var(--primary);
        }
        
        /* Enhanced Settings Section for Mobile */
        .settings-section {
            text-align: left;
        }
        
        .settings-card {
            background: var(--card-bg);
            border-radius: 15px;
            padding: 15px;
            margin: 15px 0;
            box-shadow: var(--shadow);
        }
        
        .settings-group {
            margin-bottom: 20px;
        }
        
        .settings-group h3 {
            color: var(--primary);
            margin-bottom: 12px;
            font-size: 16px;
        }
        
        .language-options {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 8px;
        }
        
        .language-option {
            padding: 12px;
            background: var(--darker);
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s;
            text-align: center;
            font-size: 14px;
        }
        
        .language-option.active {
            background: var(--primary);
            color: white;
            font-weight: bold;
        }
        
        .language-option:hover {
            background: var(--secondary);
            color: white;
        }
        
        /* Enhanced Results Modal for Mobile */
        .result-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            padding: 15px;
        }
        
        .result-content {
            background: var(--card-bg);
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            border: 3px solid var(--primary);
            max-width: 350px;
            width: 100%;
            box-shadow: var(--shadow);
        }
        
        .result-success {
            border-color: var(--success);
        }
        
        .result-error {
            border-color: var(--danger);
        }
        
        .result-icon {
            font-size: 42px;
            margin-bottom: 12px;
        }
        
        /* Enhanced Camera Permission for Mobile */
        .camera-permission {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            padding: 20px;
            text-align: center;
            color: var(--text-secondary);
        }
        
        .camera-permission i {
            font-size: 42px;
            margin-bottom: 12px;
            color: var(--primary);
        }
        
        .enable-camera-text {
            font-size: 20px;
            font-weight: bold;
            margin: 12px 0;
            line-height: 1.2;
            text-align: center;
        }
        
        .enable-camera-text span {
            display: block;
        }
        
        .camera-instruction {
            font-size: 13px;
            margin: 8px 0 15px;
            color: var(--text-secondary);
        }
        
        /* Payment Form Styles */
        .payment-form {
            margin-top: 15px;
        }
        
        .card-element {
            padding: 12px;
            border: 2px solid var(--card-border);
            border-radius: 10px;
            background: var(--darker);
            margin-bottom: 15px;
        }
        
        .card-errors {
            color: var(--danger);
            font-size: 13px;
            margin-bottom: 10px;
            min-height: 20px;
        }
        
        /* Paystack Button */
        .paystack-button {
            background: #00A859;
            color: white;
            border: none;
            padding: 14px;
            border-radius: 10px;
            font-size: 15px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            width: 100%;
            margin-top: 10px;
        }
        
        .paystack-button:hover {
            background: #008F4C;
            transform: translateY(-2px);
        }
        
        /* New Course Modal */
        .new-course-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            padding: 15px;
        }
        
        .new-course-content {
            background: var(--card-bg);
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            border: 3px solid var(--primary);
            max-width: 400px;
            width: 100%;
            box-shadow: var(--shadow);
            max-height: 90vh;
            overflow-y: auto;
        }
        
        .form-group {
            margin-bottom: 15px;
            text-align: left;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 6px;
            color: var(--text-primary);
            font-weight: bold;
            font-size: 14px;
        }
        
        .form-group input, .form-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid var(--card-border);
            border-radius: 10px;
            background: var(--darker);
            color: var(--text-primary);
            font-size: 15px;
            transition: all 0.3s;
        }
        
        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }
        
        .form-actions {
            display: flex;
            gap: 8px;
            margin-top: 20px;
        }
        
        .form-actions .btn {
            flex: 1;
            margin: 0;
        }

        @media (max-width: 480px) {
            .header h1 { font-size: 18px; }
            .camera-container { height: 250px; max-width: 100%; }
            .history-filters { flex-direction: column; }
            .filter-select { min-width: 100%; }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Enhanced Header for Mobile -->
        <div class="header">
            <div class="header-content">
                <h1 id="headerTitle">🎓 SmartTendance</h1>
                <div class="student-info">
                    <span id="studentName">John Smith</span> • 
                    <span id="studentId">STU1001</span>
                </div>
            </div>
            <div class="header-controls">
                <button class="theme-toggle" id="themeToggle">
                    <i class="fas fa-moon"></i>
                </button>
                <button class="new-course-toggle" onclick="showNewCourseModal()">
                    <i class="fas fa-plus"></i>
                </button>
            </div>
        </div>
        
        <!-- Trial Info Banner -->
        <div id="trialBanner" class="trial-banner" style="display: none;">
            <div class="banner-content">
                <h3><i class="fas fa-clock"></i> <span id="trialTitle">Free Trial Active</span></h3>
                <p><span id="trialDaysText">You have</span> <span id="trialDaysLeft">7</span> <span id="trialDaysSuffix">days left in your free trial</span></p>
                <div class="trial-progress">
                    <div id="trialProgressBar" class="trial-progress-bar" style="width: 50%"></div>
                </div>
                <div class="trial-days">
                    <span id="trialStartDay">Day 1</span>
                    <span id="trialEndDate">Day 7</span>
                </div>
            </div>
            <button class="btn btn-small" onclick="switchTab('premium')">
                <i class="fas fa-crown"></i> <span id="subscribeNowText">Subscribe Now</span>
            </button>
        </div>
        
        <!-- Scanner Tab -->
        <div id="scanner" class="tab-content active">
            <div class="scanner-section">
                <h2 id="scanTitle">Scan QR Code</h2>
                <p id="scanDescription" style="color: var(--text-secondary); margin: 8px 0 12px;">Point your camera at the professor's QR code</p>
                
                <div class="scanner-box">
                    <div class="camera-container">
                        <video id="video" playsinline autoplay></video>
                        <div class="scan-overlay">
                            <div class="scan-line"></div>
                        </div>
                        <div id="cameraPermission" class="camera-permission" style="display: none;">
                            <i class="fas fa-camera"></i>
                            <div class="enable-camera-text">
                                <span id="enableCameraText1">Enable</span>
                                <span id="enableCameraText2">Camera</span>
                            </div>
                            <p class="camera-instruction" id="cameraInstructionText">Camera access is required to scan QR codes</p>
                            <button class="btn" onclick="startScanner()" style="margin-top: 15px;">
                                <i class="fas fa-play"></i> <span id="enableCameraBtnText">Enable Camera</span>
                            </button>
                        </div>
                    </div>
                    
                    <div class="scanner-controls">
                        <button class="btn" onclick="stopScanner()" id="stopBtn">
                            <i class="fas fa-stop"></i> <span id="stopScannerText">Stop Scanner</span>
                        </button>
                    </div>
                </div>
                
                <div style="color: var(--text-secondary); font-size: 11px; margin-top: 15px;">
                    <i class="fas fa-lightbulb"></i> <span id="cameraTipsText">Hold steady for 2 seconds for best results</span>
                </div>
            </div>
        </div>
        
        <!-- History Tab -->
        <div id="history" class="tab-content">
            <div class="history-header">
                <div class="history-title-section">
                    <h2 id="historyTitle">Attendance History</h2>
                </div>
                <p id="historyDescription" style="color: var(--text-secondary); font-size: 13px;">Your complete attendance records</p>
                
                <!-- Course Filter -->
                <div class="history-filters">
                    <select id="courseFilter" class="filter-select" onchange="filterAttendanceHistory()">
                        <option value="" id="allCoursesOption">All Courses</option>
                        <!-- Course options will be loaded here -->
                    </select>
                    <select id="statusFilter" class="filter-select" onchange="filterAttendanceHistory()">
                        <option value="" id="allStatusOption">All Status</option>
                        <option value="present" id="presentOption">Present</option>
                        <option value="absent" id="absentOption">Absent</option>
                    </select>
                </div>
            </div>
            
            <!-- Summary Table -->
            <div class="summary-section">
                <h3 id="summaryTitle">Attendance Summary</h3>
                <table class="summary-table">
                    <thead>
                        <tr>
                            <th id="courseCodeHeader">Course Code</th>
                            <th id="courseNameHeader">Course Name</th>
                            <th id="attendedHeader">Attended</th>
                            <th id="totalHeader">Total</th>
                        </tr>
                    </thead>
                    <tbody id="summaryTableBody">
                        <!-- Summary rows will be generated here -->
                    </tbody>
                </table>
            </div>
            
            <!-- Enhanced Tabular Attendance History for Mobile -->
            <div class="attendance-table-container">
                <table class="attendance-table" id="attendanceTable">
                    <thead>
                        <tr>
                            <th id="tableCourseCodeHeader">Course Code</th>
                            <th id="tableCourseNameHeader">Course Name</th>
                            <th id="dateHeader">Date</th>
                            <th id="timeHeader">Time</th>
                            <th id="roomHeader">Room</th>
                            <th id="statusHeader">Status</th>
                            <th class="action-cell" id="actionHeader">Action</th>
                        </tr>
                    </thead>
                    <tbody id="attendanceTableBody">
                        <!-- Attendance records will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <!-- Premium Tab -->
        <div id="premium" class="tab-content">
            <h2 id="premiumTitle">Semester Subscription</h2>
            <p id="premiumDescription" style="color: var(--text-secondary); margin-bottom: 15px; font-size: 13px;">Unlock full features with our affordable subscription</p>
            
            <div class="subscription-card">
                <h3><i class="fas fa-crown"></i> <span id="currentPlanTitle">Current Plan</span></h3>
                
                <div class="subscription-info">
                    <div class="subscription-row">
                        <span id="planLabel">Plan:</span>
                        <span><strong id="planValue">Student Access</strong></span>
                    </div>
                    <div class="subscription-row">
                        <span id="priceLabel">Price:</span>
                        <span><strong id="priceValue">$1 / 4 months</strong></span>
                    </div>
                    <div class="subscription-row">
                        <span id="statusLabel">Status:</span>
                        <span id="subscriptionStatus" style="color: var(--primary);"><strong id="statusValue">Active (Trial - 7 days left)</strong></span>
                    </div>
                    <div class="subscription-row">
                        <span id="expiresLabel">Expires:</span>
                        <span id="subscriptionExpiry"><strong id="expiresValue">10/24/2025</strong></span>
                    </div>
                </div>
                
                <h4 style="margin-top: 15px;" id="paymentMethodsTitle">Payment Methods</h4>
                <div class="payment-options">
                    <div class="payment-option" onclick="showPaymentForm('card')">
                        <div class="payment-icon"><i class="fas fa-credit-card"></i></div>
                        <div>
                            <div><strong id="payWithCardText">Pay with Card</strong></div>
                            <div style="font-size: 11px; color: var(--text-secondary);" id="cardTypesText">Visa, Mastercard, American Express</div>
                        </div>
                    </div>
                    <div class="payment-option" onclick="showPaymentForm('paystack')">
                        <div class="payment-icon"><i class="fas fa-university"></i></div>
                        <div>
                            <div><strong id="payWithPaystackText">Pay with Paystack</strong></div>
                            <div style="font-size: 11px; color: var(--text-secondary);" id="paystackMethodsText">Secure Paystack payment (Cards, Bank Transfer, USSD)</div>
                        </div>
                    </div>
                </div>
                
                <div style="text-align: center; margin-top: 15px; font-size: 11px; color: var(--text-secondary);">
                    <i class="fas fa-shield-alt"></i> <span id="securePaymentText">Secure Payment Powered by Stripe & Paystack</span>
                </div>
            </div>
        </div>
        
        <!-- Settings Tab -->
        <div id="settings" class="tab-content">
            <div class="settings-section">
                <h2 id="settingsTitle">Settings</h2>
                <p id="settingsDescription" style="color: var(--text-secondary); margin-bottom: 15px; font-size: 13px;">Customize your app experience</p>
                
                <div class="settings-card">
                    <div class="settings-group">
                        <h3 id="languageTitle">Language</h3>
                        <div class="language-options">
                            <div class="language-option active" data-lang="en">
                                English
                            </div>
                            <div class="language-option" data-lang="es">
                                Español
                            </div>
                            <div class="language-option" data-lang="fr">
                                Français
                            </div>
                            <div class="language-option" data-lang="ar">
                                العربية
                            </div>
                            <div class="language-option" data-lang="zh">
                                中文
                            </div>
                            <div class="language-option" data-lang="hi">
                                हिन्दी
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Enhanced Bottom Navigation -->
    <div class="bottom-nav">
        <button class="nav-item active" onclick="switchTab('scanner')">
            <i class="fas fa-qrcode"></i>
            <span class="nav-label" id="scanNavLabel">Scan</span>
        </button>
        <button class="nav-item" onclick="switchTab('history')">
            <i class="fas fa-history"></i>
            <span class="nav-label" id="historyNavLabel">History</span>
        </button>
        <button class="nav-item" onclick="switchTab('premium')">
            <i class="fas fa-crown"></i>
            <span class="nav-label" id="premiumNavLabel">Premium</span>
        </button>
        <button class="nav-item" onclick="switchTab('settings')">
            <i class="fas fa-cog"></i>
            <span class="nav-label" id="settingsNavLabel">Settings</span>
        </button>
    </div>

    <!-- Result Modal -->
    <div class="result-modal" id="resultModal" style="display: none;">
        <div class="result-content" id="resultContent">
            <div class="result-icon" id="resultIcon">✅</div>
            <h3 id="resultTitle">Attendance Recorded!</h3>
            <p id="resultMessage" style="margin: 12px 0; font-size: 14px;"></p>
            <button class="btn" onclick="closeResult()">
                <span id="continueBtnText">Continue</span>
            </button>
        </div>
    </div>

    <!-- New Course Modal -->
    <div class="new-course-modal" id="newCourseModal" style="display: none;">
        <div class="new-course-content">
            <h2><i class="fas fa-plus"></i> <span id="addCourseTitle">Add Course</span></h2>
            <p style="color: var(--text-secondary); margin: 8px 0 15px; font-size: 13px;" id="addCourseDescription">Add a course to track attendance</p>
            
            <div class="form-group">
                <label for="courseCode" id="courseCodeLabel">Course Code</label>
                <input type="text" id="courseCode" placeholder="e.g., CS101">
            </div>
            
            <div class="form-group">
                <label for="courseName" id="courseNameLabel">Course Name</label>
                <input type="text" id="courseName" placeholder="e.g., Computer Science 101">
            </div>
            
            <div class="form-group">
                <label for="courseRoom" id="courseRoomLabel">Room</label>
                <input type="text" id="courseRoom" placeholder="e.g., Room 301">
            </div>
            
            <div class="form-group">
                <label for="courseLevel" id="courseLevelLabel">Academic Level</label>
                <select id="courseLevel">
                    <option value="100" id="level100">100 Level</option>
                    <option value="200" id="level200">200 Level</option>
                    <option value="300" id="level300">300 Level</option>
                    <option value="400" id="level400">400 Level</option>
                    <option value="500" id="level500">500 Level</option>
                    <option value="600" id="level600">600 Level</option>
                    <option value="700" id="level700">700 Level</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="courseSemester" id="courseSemesterLabel">Semester</label>
                <select id="courseSemester">
                    <option value="1" id="semester1">First Semester</option>
                    <option value="2" id="semester2">Second Semester</option>
                </select>
            </div>
            
            <div class="form-actions">
                <button class="btn btn-secondary" onclick="closeNewCourseModal()" id="cancelBtn">
                    Cancel
                </button>
                <button class="btn" onclick="addNewCourse()">
                    <i class="fas fa-save"></i> <span id="addCourseBtnText">Add Course</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Payment Modal -->
    <div class="new-course-modal" id="paymentModal" style="display: none;">
        <div class="new-course-content">
            <h2><i class="fas fa-credit-card"></i> <span id="completePaymentTitle">Complete Payment</span></h2>
            <p style="color: var(--text-secondary); margin: 8px 0 15px; font-size: 13px;" id="completePaymentDescription">Complete your subscription payment</p>
            
            <div id="cardPaymentForm" class="payment-form" style="display: none;">
                <div class="form-group">
                    <label for="cardholderName" id="cardholderNameLabel">Cardholder Name</label>
                    <input type="text" id="cardholderName" placeholder="John Doe">
                </div>
                <div class="form-group">
                    <label id="cardDetailsLabel">Card Details</label>
                    <div id="card-element" class="card-element">
                        <!-- Stripe Card Element will be inserted here -->
                    </div>
                    <div id="card-errors" class="card-errors" role="alert"></div>
                </div>
            </div>
            
            <div id="paystackPaymentForm" class="payment-form" style="display: none;">
                <div class="form-group">
                    <label for="paystackEmail" id="paystackEmailLabel">Email Address</label>
                    <input type="email" id="paystackEmail" placeholder="your@email.com" value="customer@example.com">
                </div>
                <div class="form-group">
                    <label for="paystackPhone" id="paystackPhoneLabel">Phone Number (Optional)</label>
                    <input type="tel" id="paystackPhone" placeholder="+2348012345678">
                </div>
                <button class="paystack-button" onclick="processPaystackPayment()">
                    <i class="fas fa-lock"></i> <span id="paystackButtonText">Pay $1.00 with Paystack</span>
                </button>
                <div style="text-align: center; margin-top: 10px; font-size: 11px; color: var(--text-secondary);">
                    <i class="fas fa-info-circle"></i> <span id="paystackRedirectText">You'll be redirected to Paystack for secure payment</span>
                </div>
            </div>
            
            <div class="subscription-info" style="margin: 20px 0;">
                <div class="subscription-row">
                    <span id="paymentPlanLabel">Plan:</span>
                    <span><strong>Student Access</strong></span>
                </div>
                <div class="subscription-row">
                    <span id="paymentDurationLabel">Duration:</span>
                    <span><strong>4 Months</strong></span>
                </div>
                <div class="subscription-row">
                    <span id="paymentAmountLabel">Amount:</span>
                    <span><strong>$1.00 USD</strong></span>
                </div>
            </div>
            
            <div class="form-actions">
                <button class="btn btn-secondary" onclick="closePaymentModal()" id="paymentCancelBtn">
                    Cancel
                </button>
                <button class="btn" id="payWithCardBtn" onclick="processCardPayment()" style="display: none;">
                    <i class="fas fa-lock"></i> <span id="payCardButtonText">Pay $1.00</span>
                </button>
            </div>
        </div>
    </div>

    <script>
        // Student data
        let studentCourses = [];
        let attendanceRecords = [];
        let videoStream = null;
        let scanInterval = null;
        let isScannerActive = false;
        let currentLanguage = 'en';
        
        // DUPLICATE PROTECTION VARIABLES
        let lastScannedCode = null;
        let scanCooldown = false;

        // Payment variables
        let stripe = null;
        let cardElement = null;
        let currentPaymentMethod = null;

        const TRIAL_DAYS = 7;
        const SUBSCRIPTION_PRICE = 1.00; // USD
        const SUBSCRIPTION_DURATION = 4; // Months

        // Paystack Configuration
        const PAYSTACK_PUBLIC_KEY = 'pk_test_1d3a2acb7b7b7fd7a3d58bdcdd0285a582d5f292';

        // Language translations
        const translations = {
            en: {
                // Header
                headerTitle: "🎓 SmartTendance",
                
                // Scanner Tab
                scanTitle: "Scan QR Code",
                scanDescription: "Point your camera at the professor's QR code",
                stopScannerText: "Stop Scanner",
                cameraTipsText: "Hold steady for 2 seconds for best results",
                enableCameraText1: "Enable",
                enableCameraText2: "Camera",
                cameraInstructionText: "Camera access is required to scan QR codes",
                enableCameraBtnText: "Enable Camera",
                
                // Trial Banner
                trialTitle: "Free Trial Active",
                trialDaysText: "You have",
                trialDaysSuffix: "days left in your free trial",
                trialStartDay: "Day 1",
                subscribeNowText: "Subscribe Now",
                
                // History Tab
                historyTitle: "Attendance History",
                historyDescription: "Your complete attendance records",
                summaryTitle: "Attendance Summary",
                courseCodeHeader: "Course Code",
                courseNameHeader: "Course Name",
                attendedHeader: "Attended",
                totalHeader: "Total",
                tableCourseCodeHeader: "Course Code",
                tableCourseNameHeader: "Course Name",
                dateHeader: "Date",
                timeHeader: "Time",
                roomHeader: "Room",
                statusHeader: "Status",
                actionHeader: "Action",
                allCoursesOption: "All Courses",
                allStatusOption: "All Status",
                presentOption: "Present",
                absentOption: "Absent",
                
                // Premium Tab
                premiumTitle: "Semester Subscription",
                premiumDescription: "Unlock full features with our affordable subscription",
                currentPlanTitle: "Current Plan",
                planLabel: "Plan:",
                priceLabel: "Price:",
                statusLabel: "Status:",
                expiresLabel: "Expires:",
                paymentMethodsTitle: "Payment Methods",
                payWithCardText: "Pay with Card",
                cardTypesText: "Visa, Mastercard, American Express",
                payWithPaystackText: "Pay with Paystack",
                paystackMethodsText: "Secure Paystack payment (Cards, Bank Transfer, USSD)",
                securePaymentText: "Secure Payment Powered by Stripe & Paystack",
                
                // Settings Tab
                settingsTitle: "Settings",
                settingsDescription: "Customize your app experience",
                languageTitle: "Language",
                
                // Navigation
                scanNavLabel: "Scan",
                historyNavLabel: "History",
                premiumNavLabel: "Premium",
                settingsNavLabel: "Settings",
                
                // New Course Modal
                addCourseTitle: "Add Course",
                addCourseDescription: "Add a course to track attendance",
                courseCodeLabel: "Course Code",
                courseNameLabel: "Course Name",
                courseRoomLabel: "Room",
                courseLevelLabel: "Academic Level",
                courseSemesterLabel: "Semester",
                level100: "100 Level",
                level200: "200 Level",
                level300: "300 Level",
                level400: "400 Level",
                level500: "500 Level",
                level600: "600 Level",
                level700: "700 Level",
                semester1: "First Semester",
                semester2: "Second Semester",
                cancelBtn: "Cancel",
                addCourseBtnText: "Add Course",
                
                // Payment Modal
                completePaymentTitle: "Complete Payment",
                completePaymentDescription: "Complete your subscription payment",
                cardholderNameLabel: "Cardholder Name",
                cardDetailsLabel: "Card Details",
                paystackEmailLabel: "Email Address",
                paystackPhoneLabel: "Phone Number (Optional)",
                paystackButtonText: "Pay $1.00 with Paystack",
                paystackRedirectText: "You'll be redirected to Paystack for secure payment",
                paymentPlanLabel: "Plan:",
                paymentDurationLabel: "Duration:",
                paymentAmountLabel: "Amount:",
                paymentCancelBtn: "Cancel",
                payCardButtonText: "Pay $1.00",
                
                // Result Modal
                continueBtnText: "Continue",
                
                // Status Messages
                presentStatus: "PRESENT",
                absentStatus: "ABSENT",
                activeStatus: "Active",
                trialStatus: "Trial",
                paidStatus: "Paid",
                expiredStatus: "Expired"
            },
            es: {
                // Header
                headerTitle: "🎓 SmartTendance",
                
                // Scanner Tab
                scanTitle: "Escanear Código QR",
                scanDescription: "Apunte su cámara al código QR del profesor",
                stopScannerText: "Detener Escáner",
                cameraTipsText: "Mantenga estable durante 2 segundos para mejores resultados",
                enableCameraText1: "Habilitar",
                enableCameraText2: "Cámara",
                cameraInstructionText: "Se requiere acceso a la cámara para escanear códigos QR",
                enableCameraBtnText: "Habilitar Cámara",
                
                // Trial Banner
                trialTitle: "Prueba Gratuita Activa",
                trialDaysText: "Tienes",
                trialDaysSuffix: "días restantes en tu prueba gratuita",
                trialStartDay: "Día 1",
                subscribeNowText: "Suscribirse Ahora",
                
                // History Tab
                historyTitle: "Historial de Asistencia",
                historyDescription: "Tus registros completos de asistencia",
                summaryTitle: "Resumen de Asistencia",
                courseCodeHeader: "Código del Curso",
                courseNameHeader: "Nombre del Curso",
                attendedHeader: "Asistió",
                totalHeader: "Total",
                tableCourseCodeHeader: "Código del Curso",
                tableCourseNameHeader: "Nombre del Curso",
                dateHeader: "Fecha",
                timeHeader: "Hora",
                roomHeader: "Aula",
                statusHeader: "Estado",
                actionHeader: "Acción",
                allCoursesOption: "Todos los Cursos",
                allStatusOption: "Todos los Estados",
                presentOption: "Presente",
                absentOption: "Ausente",
                
                // Premium Tab
                premiumTitle: "Suscripción del Semestre",
                premiumDescription: "Desbloquea todas las funciones con nuestra suscripción asequible",
                currentPlanTitle: "Plan Actual",
                planLabel: "Plan:",
                priceLabel: "Precio:",
                statusLabel: "Estado:",
                expiresLabel: "Caduca:",
                paymentMethodsTitle: "Métodos de Pago",
                payWithCardText: "Pagar con Tarjeta",
                cardTypesText: "Visa, Mastercard, American Express",
                payWithPaystackText: "Pagar con Paystack",
                paystackMethodsText: "Pago seguro con Paystack (Tarjetas, Transferencia Bancaria, USSD)",
                securePaymentText: "Pago Seguro con Stripe y Paystack",
                
                // Settings Tab
                settingsTitle: "Configuración",
                settingsDescription: "Personaliza tu experiencia en la aplicación",
                languageTitle: "Idioma",
                
                // Navigation
                scanNavLabel: "Escanear",
                historyNavLabel: "Historial",
                premiumNavLabel: "Premium",
                settingsNavLabel: "Configuración",
                
                // New Course Modal
                addCourseTitle: "Agregar Curso",
                addCourseDescription: "Agrega un curso para rastrear asistencia",
                courseCodeLabel: "Código del Curso",
                courseNameLabel: "Nombre del Curso",
                courseRoomLabel: "Aula",
                courseLevelLabel: "Nivel Académico",
                courseSemesterLabel: "Semestre",
                level100: "Nivel 100",
                level200: "Nivel 200",
                level300: "Nivel 300",
                level400: "Nivel 400",
                level500: "Nivel 500",
                level600: "Nivel 600",
                level700: "Nivel 700",
                semester1: "Primer Semestre",
                semester2: "Segundo Semestre",
                cancelBtn: "Cancelar",
                addCourseBtnText: "Agregar Curso",
                
                // Payment Modal
                completePaymentTitle: "Completar Pago",
                completePaymentDescription: "Completa tu pago de suscripción",
                cardholderNameLabel: "Nombre del Titular",
                cardDetailsLabel: "Detalles de la Tarjeta",
                paystackEmailLabel: "Correo Electrónico",
                paystackPhoneLabel: "Número de Teléfono (Opcional)",
                paystackButtonText: "Pagar $1.00 con Paystack",
                paystackRedirectText: "Serás redirigido a Paystack para pago seguro",
                paymentPlanLabel: "Plan:",
                paymentDurationLabel: "Duración:",
                paymentAmountLabel: "Monto:",
                paymentCancelBtn: "Cancelar",
                payCardButtonText: "Pagar $1.00",
                
                // Result Modal
                continueBtnText: "Continuar",
                
                // Status Messages
                presentStatus: "PRESENTE",
                absentStatus: "AUSENTE",
                activeStatus: "Activo",
                trialStatus: "Prueba",
                paidStatus: "Pagado",
                expiredStatus: "Expirado"
            },
            fr: {
                // Header
                headerTitle: "🎓 SmartTendance",
                
                // Scanner Tab
                scanTitle: "Scanner le Code QR",
                scanDescription: "Pointez votre caméra vers le code QR du professeur",
                stopScannerText: "Arrêter le Scanner",
                cameraTipsText: "Maintenez stable pendant 2 secondes pour de meilleurs résultats",
                enableCameraText1: "Activer",
                enableCameraText2: "Caméra",
                cameraInstructionText: "L'accès à la caméra est requis pour scanner les codes QR",
                enableCameraBtnText: "Activer la Caméra",
                
                // Trial Banner
                trialTitle: "Essai Gratuit Actif",
                trialDaysText: "Il vous reste",
                trialDaysSuffix: "jours dans votre essai gratuit",
                trialStartDay: "Jour 1",
                subscribeNowText: "S'abonner Maintenant",
                
                // History Tab
                historyTitle: "Historique de Présence",
                historyDescription: "Vos registres de présence complets",
                summaryTitle: "Résumé de Présence",
                courseCodeHeader: "Code du Cours",
                courseNameHeader: "Nom du Cours",
                attendedHeader: "Présent",
                totalHeader: "Total",
                tableCourseCodeHeader: "Code du Cours",
                tableCourseNameHeader: "Nom du Cours",
                dateHeader: "Date",
                timeHeader: "Heure",
                roomHeader: "Salle",
                statusHeader: "Statut",
                actionHeader: "Action",
                allCoursesOption: "Tous les Cours",
                allStatusOption: "Tous les Statuts",
                presentOption: "Présent",
                absentOption: "Absent",
                
                // Premium Tab
                premiumTitle: "Abonnement Semestriel",
                premiumDescription: "Débloquez toutes les fonctionnalités avec notre abonnement abordable",
                currentPlanTitle: "Plan Actuel",
                planLabel: "Plan:",
                priceLabel: "Prix:",
                statusLabel: "Statut:",
                expiresLabel: "Expire:",
                paymentMethodsTitle: "Méthodes de Paiement",
                payWithCardText: "Payer par Carte",
                cardTypesText: "Visa, Mastercard, American Express",
                payWithPaystackText: "Payer avec Paystack",
                paystackMethodsText: "Paiement sécurisé Paystack (Cartes, Virement Bancaire, USSD)",
                securePaymentText: "Paiement Sécurisé par Stripe et Paystack",
                
                // Settings Tab
                settingsTitle: "Paramètres",
                settingsDescription: "Personnalisez votre expérience d'application",
                languageTitle: "Langue",
                
                // Navigation
                scanNavLabel: "Scanner",
                historyNavLabel: "Historique",
                premiumNavLabel: "Premium",
                settingsNavLabel: "Paramètres",
                
                // New Course Modal
                addCourseTitle: "Ajouter un Cours",
                addCourseDescription: "Ajouter un cours pour suivre la présence",
                courseCodeLabel: "Code du Cours",
                courseNameLabel: "Nom du Cours",
                courseRoomLabel: "Salle",
                courseLevelLabel: "Niveau Académique",
                courseSemesterLabel: "Semestre",
                level100: "Niveau 100",
                level200: "Niveau 200",
                level300: "Niveau 300",
                level400: "Niveau 400",
                level500: "Niveau 500",
                level600: "Niveau 600",
                level700: "Niveau 700",
                semester1: "Premier Semestre",
                semester2: "Deuxième Semestre",
                cancelBtn: "Annuler",
                addCourseBtnText: "Ajouter le Cours",
                
                // Payment Modal
                completePaymentTitle: "Finaliser le Paiement",
                completePaymentDescription: "Finalisez votre paiement d'abonnement",
                cardholderNameLabel: "Nom du Titulaire",
                cardDetailsLabel: "Détails de la Carte",
                paystackEmailLabel: "Adresse Email",
                paystackPhoneLabel: "Numéro de Téléphone (Optionnel)",
                paystackButtonText: "Payer 1,00 $ avec Paystack",
                paystackRedirectText: "Vous serez redirigé vers Paystack pour un paiement sécurisé",
                paymentPlanLabel: "Plan:",
                paymentDurationLabel: "Durée:",
                paymentAmountLabel: "Montant:",
                paymentCancelBtn: "Annuler",
                payCardButtonText: "Payer 1,00 $",
                
                // Result Modal
                continueBtnText: "Continuer",
                
                // Status Messages
                presentStatus: "PRÉSENT",
                absentStatus: "ABSENT",
                activeStatus: "Actif",
                trialStatus: "Essai",
                paidStatus: "Payé",
                expiredStatus: "Expiré"
            },
            ar: {
                // Header
                headerTitle: "🎓 سمارت تيندانس",
                
                // Scanner Tab
                scanTitle: "مسح رمز الاستجابة السريعة",
                scanDescription: "وجه كاميرتك نحو رمز الاستجابة السريعة للأستاذ",
                stopScannerText: "إيقاف الماسح",
                cameraTipsText: "اثبت لمدة ثانيتين للحصول على أفضل النتائج",
                enableCameraText1: "تمكين",
                enableCameraText2: "الكاميرا",
                cameraInstructionText: "مطلوب الوصول إلى الكاميرا لمسح رموز QR",
                enableCameraBtnText: "تمكين الكاميرا",
                
                // Trial Banner
                trialTitle: "الإصدار التجريبي النشط",
                trialDaysText: "لديك",
                trialDaysSuffix: "أيام متبقية في الإصدار التجريبي المجاني",
                trialStartDay: "اليوم 1",
                subscribeNowText: "اشترك الآن",
                
                // History Tab
                historyTitle: "سجل الحضور",
                historyDescription: "سجلات الحضور الكاملة الخاصة بك",
                summaryTitle: "ملخص الحضور",
                courseCodeHeader: "رمز المادة",
                courseNameHeader: "اسم المادة",
                attendedHeader: "حضر",
                totalHeader: "الإجمالي",
                tableCourseCodeHeader: "رمز المادة",
                tableCourseNameHeader: "اسم المادة",
                dateHeader: "التاريخ",
                timeHeader: "الوقت",
                roomHeader: "القاعة",
                statusHeader: "الحالة",
                actionHeader: "الإجراء",
                allCoursesOption: "جميع المواد",
                allStatusOption: "جميع الحالات",
                presentOption: "حاضر",
                absentOption: "غائب",
                
                // Premium Tab
                premiumTitle: "اشتراك الفصل الدراسي",
                premiumDescription: "افتح جميع الميزات مع اشتراكنا بأسعار معقولة",
                currentPlanTitle: "الخطة الحالية",
                planLabel: "الخطة:",
                priceLabel: "السعر:",
                statusLabel: "الحالة:",
                expiresLabel: "ينتهي:",
                paymentMethodsTitle: "طرق الدفع",
                payWithCardText: "الدفع بالبطاقة",
                cardTypesText: "فيزا، ماستركارد، أمريكان إكسبريس",
                payWithPaystackText: "الدفع باستخدام Paystack",
                paystackMethodsText: "دفع آمن عبر Paystack (بطاقات، تحويل بنكي، USSD)",
                securePaymentText: "دفع آمن مدعوم من Stripe و Paystack",
                
                // Settings Tab
                settingsTitle: "الإعدادات",
                settingsDescription: "خصص تجربة التطبيق الخاصة بك",
                languageTitle: "اللغة",
                
                // Navigation
                scanNavLabel: "مسح",
                historyNavLabel: "السجل",
                premiumNavLabel: "بريميوم",
                settingsNavLabel: "الإعدادات",
                
                // New Course Modal
                addCourseTitle: "إضافة مادة",
                addCourseDescription: "أضف مادة لتتبع الحضور",
                courseCodeLabel: "رمز المادة",
                courseNameLabel: "اسم المادة",
                courseRoomLabel: "القاعة",
                courseLevelLabel: "المستوى الأكاديمي",
                courseSemesterLabel: "الفصل الدراسي",
                level100: "المستوى 100",
                level200: "المستوى 200",
                level300: "المستوى 300",
                level400: "المستوى 400",
                level500: "المستوى 500",
                level600: "المستوى 600",
                level700: "المستوى 700",
                semester1: "الفصل الدراسي الأول",
                semester2: "الفصل الدراسي الثاني",
                cancelBtn: "إلغاء",
                addCourseBtnText: "إضافة المادة",
                
                // Payment Modal
                completePaymentTitle: "إكمال الدفع",
                completePaymentDescription: "أكمل عملية الدفع للاشتراك",
                cardholderNameLabel: "اسم حامل البطاقة",
                cardDetailsLabel: "تفاصيل البطاقة",
                paystackEmailLabel: "البريد الإلكتروني",
                paystackPhoneLabel: "رقم الهاتف (اختياري)",
                paystackButtonText: "ادفع 1.00 دولار مع Paystack",
                paystackRedirectText: "سيتم تحويلك إلى Paystack للدفع الآمن",
                paymentPlanLabel: "الخطة:",
                paymentDurationLabel: "المدة:",
                paymentAmountLabel: "المبلغ:",
                paymentCancelBtn: "إلغاء",
                payCardButtonText: "ادفع 1.00 دولار",
                
                // Result Modal
                continueBtnText: "متابعة",
                
                // Status Messages
                presentStatus: "حاضر",
                absentStatus: "غائب",
                activeStatus: "نشط",
                trialStatus: "تجريبي",
                paidStatus: "مدفوع",
                expiredStatus: "منتهي"
            },
            zh: {
                // Header
                headerTitle: "🎓 SmartTendance",
                
                // Scanner Tab
                scanTitle: "扫描二维码",
                scanDescription: "将相机对准教授的二维码",
                stopScannerText: "停止扫描",
                cameraTipsText: "保持稳定2秒钟以获得最佳效果",
                enableCameraText1: "启用",
                enableCameraText2: "相机",
                cameraInstructionText: "需要相机权限才能扫描二维码",
                enableCameraBtnText: "启用相机",
                
                // Trial Banner
                trialTitle: "免费试用中",
                trialDaysText: "您还有",
                trialDaysSuffix: "天免费试用期",
                trialStartDay: "第1天",
                subscribeNowText: "立即订阅",
                
                // History Tab
                historyTitle: "考勤历史",
                historyDescription: "您的完整考勤记录",
                summaryTitle: "考勤摘要",
                courseCodeHeader: "课程代码",
                courseNameHeader: "课程名称",
                attendedHeader: "已出席",
                totalHeader: "总计",
                tableCourseCodeHeader: "课程代码",
                tableCourseNameHeader: "课程名称",
                dateHeader: "日期",
                timeHeader: "时间",
                roomHeader: "教室",
                statusHeader: "状态",
                actionHeader: "操作",
                allCoursesOption: "所有课程",
                allStatusOption: "所有状态",
                presentOption: "出席",
                absentOption: "缺席",
                
                // Premium Tab
                premiumTitle: "学期订阅",
                premiumDescription: "通过我们实惠的订阅解锁全部功能",
                currentPlanTitle: "当前计划",
                planLabel: "计划:",
                priceLabel: "价格:",
                statusLabel: "状态:",
                expiresLabel: "到期:",
                paymentMethodsTitle: "支付方式",
                payWithCardText: "信用卡支付",
                cardTypesText: "Visa, Mastercard, American Express",
                payWithPaystackText: "使用 Paystack 支付",
                paystackMethodsText: "安全的 Paystack 支付（信用卡、银行转账、USSD）",
                securePaymentText: "由 Stripe 和 Paystack 提供安全支付",
                
                // Settings Tab
                settingsTitle: "设置",
                settingsDescription: "自定义您的应用体验",
                languageTitle: "语言",
                
                // Navigation
                scanNavLabel: "扫描",
                historyNavLabel: "历史",
                premiumNavLabel: "高级版",
                settingsNavLabel: "设置",
                
                // New Course Modal
                addCourseTitle: "添加课程",
                addCourseDescription: "添加课程以跟踪考勤",
                courseCodeLabel: "课程代码",
                courseNameLabel: "课程名称",
                courseRoomLabel: "教室",
                courseLevelLabel: "学术级别",
                courseSemesterLabel: "学期",
                level100: "100 级",
                level200: "200 级",
                level300: "300 级",
                level400: "400 级",
                level500: "500 级",
                level600: "600 级",
                level700: "700 级",
                semester1: "第一学期",
                semester2: "第二学期",
                cancelBtn: "取消",
                addCourseBtnText: "添加课程",
                
                // Payment Modal
                completePaymentTitle: "完成支付",
                completePaymentDescription: "完成您的订阅支付",
                cardholderNameLabel: "持卡人姓名",
                cardDetailsLabel: "卡片详情",
                paystackEmailLabel: "电子邮件地址",
                paystackPhoneLabel: "电话号码（可选）",
                paystackButtonText: "使用 Paystack 支付 $1.00",
                paystackRedirectText: "您将被重定向到 Paystack 进行安全支付",
                paymentPlanLabel: "计划:",
                paymentDurationLabel: "时长:",
                paymentAmountLabel: "金额:",
                paymentCancelBtn: "取消",
                payCardButtonText: "支付 $1.00",
                
                // Result Modal
                continueBtnText: "继续",
                
                // Status Messages
                presentStatus: "出席",
                absentStatus: "缺席",
                activeStatus: "活跃",
                trialStatus: "试用",
                paidStatus: "已支付",
                expiredStatus: "已过期"
            },
            hi: {
                // Header
                headerTitle: "🎓 स्मार्टटेंडेंस",
                
                // Scanner Tab
                scanTitle: "QR कोड स्कैन करें",
                scanDescription: "अपने कैमरे को प्रोफेसर के QR कोड पर रखें",
                stopScannerText: "स्कैनर बंद करें",
                cameraTipsText: "सर्वोत्तम परिणामों के लिए 2 सेकंड के लिए स्थिर रखें",
                enableCameraText1: "सक्षम",
                enableCameraText2: "कैमरा",
                cameraInstructionText: "QR कोड स्कैन करने के लिए कैमरा एक्सेस आवश्यक है",
                enableCameraBtnText: "कैमरा सक्षम करें",
                
                // Trial Banner
                trialTitle: "निःशुल्क परीक्षण सक्रिय",
                trialDaysText: "आपके पास",
                trialDaysSuffix: "दिन बचे हैं आपके निःशुल्क परीक्षण में",
                trialStartDay: "दिन 1",
                subscribeNowText: "अभी सदस्यता लें",
                
                // History Tab
                historyTitle: "उपस्थिति इतिहास",
                historyDescription: "आपके पूर्ण उपस्थिति रिकॉर्ड",
                summaryTitle: "उपस्थिति सारांश",
                courseCodeHeader: "कोर्स कोड",
                courseNameHeader: "कोर्स नाम",
                attendedHeader: "उपस्थित",
                totalHeader: "कुल",
                tableCourseCodeHeader: "कोर्स कोड",
                tableCourseNameHeader: "कोर्स नाम",
                dateHeader: "तारीख",
                timeHeader: "समय",
                roomHeader: "कक्ष",
                statusHeader: "स्थिति",
                actionHeader: "कार्रवाई",
                allCoursesOption: "सभी कोर्स",
                allStatusOption: "सभी स्थिति",
                presentOption: "उपस्थित",
                absentOption: "अनुपस्थित",
                
                // Premium Tab
                premiumTitle: "सेमेस्टर सदस्यता",
                premiumDescription: "हमारी सस्ती सदस्यता के साथ पूर्ण सुविधाएं अनलॉक करें",
                currentPlanTitle: "वर्तमान योजना",
                planLabel: "योजना:",
                priceLabel: "मूल्य:",
                statusLabel: "स्थिति:",
                expiresLabel: "समाप्त:",
                paymentMethodsTitle: "भुगतान विधियाँ",
                payWithCardText: "कार्ड से भुगतान करें",
                cardTypesText: "वीज़ा, मास्टरकार्ड, अमेरिकन एक्सप्रेस",
                payWithPaystackText: "Paystack से भुगतान करें",
                paystackMethodsText: "सुरक्षित Paystack भुगतान (कार्ड, बैंक ट्रांसफर, USSD)",
                securePaymentText: "स्ट्राइप और Paystack द्वारा सुरक्षित भुगतान",
                
                // Settings Tab
                settingsTitle: "सेटिंग्स",
                settingsDescription: "अपने ऐप अनुभव को अनुकूलित करें",
                languageTitle: "भाषा",
                
                // Navigation
                scanNavLabel: "स्कैन",
                historyNavLabel: "इतिहास",
                premiumNavLabel: "प्रीमियम",
                settingsNavLabel: "सेटिंग्स",
                
                // New Course Modal
                addCourseTitle: "कोर्स जोड़ें",
                addCourseDescription: "उपस्थिति ट्रैक करने के लिए कोर्स जोड़ें",
                courseCodeLabel: "कोर्स कोड",
                courseNameLabel: "कोर्स नाम",
                courseRoomLabel: "कक्ष",
                courseLevelLabel: "शैक्षणिक स्तर",
                courseSemesterLabel: "सेमेस्टर",
                level100: "100 स्तर",
                level200: "200 स्तर",
                level300: "300 स्तर",
                level400: "400 स्तर",
                level500: "500 स्तर",
                level600: "600 स्तर",
                level700: "700 स्तर",
                semester1: "प्रथम सेमेस्टर",
                semester2: "द्वितीय सेमेस्टर",
                cancelBtn: "रद्द करें",
                addCourseBtnText: "कोर्स जोड़ें",
                
                // Payment Modal
                completePaymentTitle: "भुगतान पूरा करें",
                completePaymentDescription: "अपनी सदस्यता भुगतान पूरी करें",
                cardholderNameLabel: "कार्डधारक का नाम",
                cardDetailsLabel: "कार्ड विवरण",
                paystackEmailLabel: "ईमेल पता",
                paystackPhoneLabel: "फोन नंबर (वैकल्पिक)",
                paystackButtonText: "Paystack से $1.00 भुगतान करें",
                paystackRedirectText: "सुरक्षित भुगतान के लिए आपको Paystack पर रीडायरेक्ट किया जाएगा",
                paymentPlanLabel: "योजना:",
                paymentDurationLabel: "अवधि:",
                paymentAmountLabel: "राशि:",
                paymentCancelBtn: "रद्द करें",
                payCardButtonText: "$1.00 भुगतान करें",
                
                // Result Modal
                continueBtnText: "जारी रखें",
                
                // Status Messages
                presentStatus: "उपस्थित",
                absentStatus: "अनुपस्थित",
                activeStatus: "सक्रिय",
                trialStatus: "परीक्षण",
                paidStatus: "भुगतान किया गया",
                expiredStatus: "समाप्त"
            }
        };

        // Number formatting based on language
        const numberFormats = {
            en: {
                decimal: ".",
                thousands: ",",
                currency: "$"
            },
            es: {
                decimal: ",",
                thousands: ".",
                currency: "$"
            },
            fr: {
                decimal: ",",
                thousands: " ",
                currency: "€"
            },
            ar: {
                decimal: ".",
                thousands: ",",
                currency: "$"
            },
            zh: {
                decimal: ".",
                thousands: ",",
                currency: "¥"
            },
            hi: {
                decimal: ".",
                thousands: ",",
                currency: "₹"
            }
        };

        // Format numbers based on language
        function formatNumber(number, isCurrency = false) {
            const format = numberFormats[currentLanguage] || numberFormats.en;
            
            if (isCurrency) {
                return `${format.currency}${number.toFixed(2)}`;
            }
            
            return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, format.thousands);
        }

        // Format dates based on language
        function formatDate(dateString) {
            const date = new Date(dateString);
            const options = { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric' 
            };
            
            return date.toLocaleDateString(currentLanguage, options);
        }

        // Format time based on language
        function formatTime(dateString) {
            const date = new Date(dateString);
            return date.toLocaleTimeString(currentLanguage, { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
        }

        // Initialize Stripe
        function initializeStripe() {
            stripe = Stripe('pk_test_51ExampleTestKey1234567890');
            const elements = stripe.elements();
            
            const style = {
                base: {
                    color: getComputedStyle(document.documentElement).getPropertyValue('--text-primary'),
                    fontFamily: '"Segoe UI", Arial, sans-serif',
                    fontSmoothing: 'antialiased',
                    fontSize: '16px',
                    '::placeholder': {
                        color: getComputedStyle(document.documentElement).getPropertyValue('--text-secondary')
                    }
                },
                invalid: {
                    color: getComputedStyle(document.documentElement).getPropertyValue('--danger'),
                    iconColor: getComputedStyle(document.documentElement).getPropertyValue('--danger')
                }
            };
            
            cardElement = elements.create('card', { style: style });
            cardElement.mount('#card-element');
            
            cardElement.on('change', function(event) {
                const displayError = document.getElementById('card-errors');
                if (event.error) {
                    displayError.textContent = event.error.message;
                } else {
                    displayError.textContent = '';
                }
            });
        }

        // Initialize app
        function initApp() {
            console.log("🚀 Initializing Student App...");
            loadStudentData();
            initializeSubscription();
            initializeStripe();
            
            // Auto-start camera when app loads
            const video = document.getElementById('video');
            const cameraPermission = document.getElementById('cameraPermission');
            
            cameraPermission.style.display = 'none';
            video.style.display = 'block';
            
            if (document.getElementById('scanner').classList.contains('active')) {
                startScanner();
            }
            
            // Language setup
            document.querySelectorAll('.language-option').forEach(option => {
                option.addEventListener('click', function() {
                    const lang = this.getAttribute('data-lang');
                    changeLanguage(lang);
                });
            });
            
            const savedLanguage = localStorage.getItem('language') || 'en';
            changeLanguage(savedLanguage, false);
            
            // Theme setup
            if (localStorage.getItem('darkMode') === 'true') {
                document.body.classList.add('light-mode');
                document.getElementById('themeToggle').innerHTML = '<i class="fas fa-sun"></i>';
            }
            
            console.log("✅ Student App initialized with Premium Features!");
        }

        // Load student data from localStorage
        function loadStudentData() {
            const savedCourses = localStorage.getItem('studentCourses');
            const savedRecords = localStorage.getItem('attendanceRecords');
            
            if (savedCourses) {
                studentCourses = JSON.parse(savedCourses);
                console.log(`📚 Loaded ${studentCourses.length} courses from storage`);
            } else {
                // Add some sample courses for demo
                studentCourses = [
                    {
                        code: "CS101",
                        name: "Computer Science 101",
                        room: "Room 301",
                        level: "100",
                        semester: "1",
                        registeredDate: new Date().toISOString()
                    },
                    {
                        code: "MATH201",
                        name: "Advanced Mathematics",
                        room: "Room 205",
                        level: "200",
                        semester: "1",
                        registeredDate: new Date().toISOString()
                    }
                ];
                saveStudentData();
            }
            
            if (savedRecords) {
                attendanceRecords = JSON.parse(savedRecords);
                console.log(`📊 Loaded ${attendanceRecords.length} attendance records from storage`);
            }
            
            loadAttendanceHistory();
            generateSummaryTable();
        }

        // Save student data to localStorage
        function saveStudentData() {
            localStorage.setItem('studentCourses', JSON.stringify(studentCourses));
            localStorage.setItem('attendanceRecords', JSON.stringify(attendanceRecords));
        }

        // Initialize subscription system
        function initializeSubscription() {
            if (!localStorage.getItem('subscriptionStartDate')) {
                const trialStartDate = new Date();
                localStorage.setItem('subscriptionStartDate', trialStartDate.toISOString());
                localStorage.setItem('subscriptionType', 'trial');
                localStorage.setItem('subscriptionStatus', 'active');
            }
            updateSubscriptionUI();
        }

        // Update subscription UI
        function updateSubscriptionUI() {
            const subscriptionType = localStorage.getItem('subscriptionType');
            const subscriptionStartDate = new Date(localStorage.getItem('subscriptionStartDate'));
            
            if (subscriptionType === 'trial') {
                const today = new Date();
                const trialEndDate = new Date(subscriptionStartDate);
                trialEndDate.setDate(trialEndDate.getDate() + TRIAL_DAYS);
                
                const daysLeft = Math.ceil((trialEndDate - today) / (1000 * 60 * 60 * 24));
                const daysPassed = TRIAL_DAYS - daysLeft;
                const progressPercentage = (daysPassed / TRIAL_DAYS) * 100;
                
                if (daysLeft > 0) {
                    // Show trial banner
                    document.getElementById('trialBanner').style.display = 'flex';
                    document.getElementById('trialDaysLeft').textContent = formatNumber(daysLeft);
                    document.getElementById('trialProgressBar').style.width = `${progressPercentage}%`;
                    
                    const statusText = `${translations[currentLanguage].activeStatus} (${translations[currentLanguage].trialStatus} - ${formatNumber(daysLeft)} ${translations[currentLanguage].trialDaysSuffix.split(' ')[0]})`;
                    document.getElementById('statusValue').textContent = statusText;
                    document.getElementById('subscriptionStatus').style.color = 'var(--warning)';
                    document.getElementById('expiresValue').textContent = formatDate(trialEndDate);
                } else {
                    // Trial expired
                    document.getElementById('trialBanner').style.display = 'flex';
                    document.getElementById('trialBanner').style.background = 'linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%)';
                    document.getElementById('trialBanner').querySelector('h3').innerHTML = '<i class="fas fa-exclamation-triangle"></i> ' + translations[currentLanguage].expiredStatus;
                    document.getElementById('trialBanner').querySelector('p').textContent = 'Please subscribe to continue using the scanner';
                    
                    document.getElementById('stopBtn').disabled = true;
                    document.getElementById('stopBtn').innerHTML = '<i class="fas fa-lock"></i> Subscription Required';
                    
                    document.getElementById('statusValue').textContent = translations[currentLanguage].expiredStatus;
                    document.getElementById('subscriptionStatus').style.color = 'var(--danger)';
                    document.getElementById('expiresValue').textContent = 'Please Subscribe';
                }
            } else if (subscriptionType === 'paid') {
                // Hide trial banner when paid
                document.getElementById('trialBanner').style.display = 'none';
                document.getElementById('statusValue').textContent = `${translations[currentLanguage].activeStatus} (${translations[currentLanguage].paidStatus})`;
                document.getElementById('subscriptionStatus').style.color = 'var(--primary)';
                const expiry = localStorage.getItem('subscriptionExpiry');
                document.getElementById('expiresValue').textContent = formatDate(expiry);
            }
        }

        // Check if user can scan
        function canUserScan() {
            const subscriptionType = localStorage.getItem('subscriptionType');
            const subscriptionStartDate = new Date(localStorage.getItem('subscriptionStartDate'));
            
            if (subscriptionType === 'trial') {
                const today = new Date();
                const trialEndDate = new Date(subscriptionStartDate);
                trialEndDate.setDate(trialEndDate.getDate() + TRIAL_DAYS);
                return today <= trialEndDate;
            } else if (subscriptionType === 'paid') {
                return true;
            }
            return false;
        }

        // Tab navigation
        function switchTab(tabName) {
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.getElementById(tabName).classList.add('active');
            
            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });
            document.querySelector(`.nav-item[onclick="switchTab('${tabName}')"]`).classList.add('active');
            
            if (tabName === 'scanner') {
                // Auto-start camera when switching to scanner tab
                const cameraPermission = document.getElementById('cameraPermission');
                const video = document.getElementById('video');
                
                cameraPermission.style.display = 'none';
                video.style.display = 'block';
                
                if (!isScannerActive) {
                    startScanner();
                }
            } else {
                stopScanner();
            }
            
            if (tabName === 'history') {
                loadAttendanceHistory();
                generateSummaryTable();
            }
        }

        // Toggle theme
        function toggleTheme() {
            document.body.classList.toggle('light-mode');
            const isLightMode = document.body.classList.contains('light-mode');
            document.getElementById('themeToggle').innerHTML = isLightMode ? '<i class="fas fa-sun"></i>' : '<i class="fas fa-moon"></i>';
            localStorage.setItem('darkMode', isLightMode);
        }

        // Show new course modal
        function showNewCourseModal() {
            document.getElementById('newCourseModal').style.display = 'flex';
            document.getElementById('courseCode').value = '';
            document.getElementById('courseName').value = '';
            document.getElementById('courseRoom').value = '';
            document.getElementById('courseLevel').value = '100';
            document.getElementById('courseSemester').value = '1';
        }

        function closeNewCourseModal() {
            document.getElementById('newCourseModal').style.display = 'none';
        }

        // Add new course
        function addNewCourse() {
            const courseCode = document.getElementById('courseCode').value.trim();
            const courseName = document.getElementById('courseName').value.trim();
            const room = document.getElementById('courseRoom').value.trim();
            const level = document.getElementById('courseLevel').value;
            const semester = document.getElementById('courseSemester').value;
            
            if (!courseCode || !courseName || !room) {
                showResult('error', 'Missing Information', 'Please fill in all required fields.');
                return;
            }
            
            if (studentCourses.some(course => course.code === courseCode)) {
                showResult('error', 'Course Exists', 'This course code is already registered.');
                return;
            }
            
            const newCourse = {
                code: courseCode,
                name: courseName,
                room: room,
                level: level,
                semester: semester,
                registeredDate: new Date().toISOString()
            };
            
            studentCourses.push(newCourse);
            saveStudentData();
            closeNewCourseModal();
            
            showResult('success', 'Course Added!', 
                `${courseCode} - ${courseName}<br>
                 Level: ${level}<br>
                 Semester: ${semester}<br>
                 Room: ${room}`);
                 
            generateSummaryTable();
        }

        // Generate summary table
        function generateSummaryTable() {
            const container = document.getElementById('summaryTableBody');
            const courseFilter = document.getElementById('courseFilter');
            
            // Update course filter options
            courseFilter.innerHTML = '<option value="">' + translations[currentLanguage].allCoursesOption + '</option>';
            studentCourses.forEach(course => {
                const option = document.createElement('option');
                option.value = course.code;
                option.textContent = `${course.code} - ${course.name}`;
                courseFilter.appendChild(option);
            });
            
            if (studentCourses.length === 0) {
                container.innerHTML = `
                    <tr>
                        <td colspan="4" style="text-align: center; color: var(--text-secondary); padding: 20px;">
                            No courses added yet. Use the + button to add courses.
                        </td>
                    </tr>
                `;
                return;
            }
            
            container.innerHTML = '';
            studentCourses.forEach(course => {
                const courseRecords = attendanceRecords.filter(record => record.courseCode === course.code);
                const total = courseRecords.length;
                const present = courseRecords.filter(record => record.status === 'present').length;
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${course.code}</td>
                    <td>${course.name}</td>
                    <td>${formatNumber(present)}</td>
                    <td>${formatNumber(total)}</td>
                `;
                container.appendChild(row);
            });
        }

        // Load attendance history
        function loadAttendanceHistory() {
            const container = document.getElementById('attendanceTableBody');
            const courseFilter = document.getElementById('courseFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            
            let filteredRecords = attendanceRecords;
            
            if (courseFilter) {
                filteredRecords = filteredRecords.filter(record => record.courseCode === courseFilter);
            }
            
            if (statusFilter) {
                filteredRecords = filteredRecords.filter(record => record.status === statusFilter);
            }
            
            if (filteredRecords.length === 0) {
                container.innerHTML = `
                    <tr>
                        <td colspan="7" style="text-align: center; color: var(--text-secondary); padding: 20px;">
                            No attendance records found.
                        </td>
                    </tr>
                `;
                return;
            }
            
            container.innerHTML = '';
            filteredRecords.forEach(record => {
                const course = studentCourses.find(c => c.code === record.courseCode);
                const statusClass = record.status === 'present' ? 'status-present' : 'status-absent';
                const statusText = record.status === 'present' ? translations[currentLanguage].presentStatus : translations[currentLanguage].absentStatus;
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${record.courseCode}</td>
                    <td>${course ? course.name : 'Unknown Course'}</td>
                    <td>${formatDate(record.date)}</td>
                    <td>${formatTime(record.timestamp)}</td>
                    <td>${record.room}</td>
                    <td class="${statusClass}">${statusText}</td>
                    <td class="action-cell">
                        <button class="delete-record-btn" onclick="deleteAttendanceRecord('${record.id}')" title="Delete Record">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                container.appendChild(row);
            });
        }

        // Filter attendance history
        function filterAttendanceHistory() {
            loadAttendanceHistory();
        }

        // Delete attendance record
        function deleteAttendanceRecord(recordId) {
            if (confirm('Are you sure you want to delete this attendance record?')) {
                attendanceRecords = attendanceRecords.filter(record => record.id !== recordId);
                saveStudentData();
                loadAttendanceHistory();
                generateSummaryTable();
                showResult('success', 'Record Deleted', 'Attendance record has been successfully deleted.');
            }
        }

        // Scanner functions
        async function startScanner() {
            if (isScannerActive) return;
            
            if (!canUserScan()) {
                showResult('error', 'Subscription Required', 'Please subscribe to continue using the QR scanner feature.');
                switchTab('premium');
                return;
            }
            
            const video = document.getElementById('video');
            const stopBtn = document.getElementById('stopBtn');
            const cameraPermission = document.getElementById('cameraPermission');
            
            try {
                const currentStream = video.srcObject;
                if (currentStream) {
                    // Camera is already running
                    cameraPermission.style.display = 'none';
                    video.style.display = 'block';
                    stopBtn.disabled = false;
                    scanInterval = setInterval(scanQRCode, 500);
                    isScannerActive = true;
                    return;
                }
                
                let constraints = { 
                    video: { 
                        facingMode: { ideal: 'environment' },
                        width: { ideal: 1280 },
                        height: { ideal: 720 }
                    } 
                };
                
                videoStream = await navigator.mediaDevices.getUserMedia(constraints);
                video.srcObject = videoStream;
                
                video.onloadedmetadata = function() {
                    cameraPermission.style.display = 'none';
                    video.style.display = 'block';
                    
                    stopBtn.disabled = false;
                    
                    scanInterval = setInterval(scanQRCode, 500);
                    isScannerActive = true;
                    
                    console.log("✅ Camera started successfully");
                };
                
            } catch (err) {
                console.error('Camera access error:', err);
                // Show permission UI only if camera fails
                cameraPermission.style.display = 'flex';
                video.style.display = 'none';
                
                let errorMessage = 'Unable to access camera. ';
                
                if (err.name === 'NotAllowedError') {
                    errorMessage += 'Please allow camera access in your browser settings.';
                } else if (err.name === 'NotFoundError') {
                    errorMessage += 'No camera found on your device.';
                } else if (err.name === 'NotSupportedError') {
                    errorMessage += 'Camera not supported on this device.';
                } else {
                    errorMessage += 'Please check permissions and try again.';
                }
                
                showResult('error', 'Camera Error', errorMessage);
            }
        }

        function stopScanner() {
            if (!isScannerActive) return;
            
            const video = document.getElementById('video');
            const stopBtn = document.getElementById('stopBtn');
            const cameraPermission = document.getElementById('cameraPermission');
            
            // Reset duplicate protection variables
            scanCooldown = false;
            lastScannedCode = null;
            
            if (videoStream) {
                videoStream.getTracks().forEach(track => track.stop());
                video.srcObject = null;
                videoStream = null;
            }
            
            if (scanInterval) {
                clearInterval(scanInterval);
                scanInterval = null;
            }
            
            cameraPermission.style.display = 'none';
            video.style.display = 'block';
            
            stopBtn.disabled = true;
            
            isScannerActive = false;
            console.log("🛑 Scanner stopped completely");
        }

        // QR SCANNING
        function scanQRCode() {
            const video = document.getElementById('video');
            
            // Don't scan if conditions aren't met or in cooldown
            if (!video || video.readyState !== video.HAVE_ENOUGH_DATA || !isScannerActive || scanCooldown) {
                return;
            }
            
            try {
                const canvas = document.createElement('canvas');
                const context = canvas.getContext('2d');
                
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                context.drawImage(video, 0, 0, canvas.width, canvas.height);
                
                const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
                const code = jsQR(imageData.data, imageData.width, imageData.height);
                
                if (code && code.data !== lastScannedCode) {
                    console.log("✅ QR Code detected - PROCESSING:", code.data);
                    
                    // PREVENT DUPLICATE SCANS
                    scanCooldown = true;
                    lastScannedCode = code.data;
                    
                    // Process the QR code
                    processQRCode(code.data);
                    
                    // Auto-stop scanner after successful scan
                    setTimeout(() => {
                        stopScanner();
                    }, 1000);
                }
            } catch (err) {
                console.error("❌ QR scanning error:", err);
            }
        }

        // QR PROCESSING
        async function processQRCode(qrData) {
            try {
                console.log("🔄 Processing QR code...");
                
                const studentId = document.getElementById('studentId').textContent;
                const studentName = document.getElementById('studentName').textContent;
                
                if (!studentId || !studentName) {
                    throw new Error('Student information not found');
                }

                let data;
                try {
                    data = JSON.parse(qrData);
                } catch (parseError) {
                    throw new Error('Invalid QR code format. Please scan a valid attendance QR code.');
                }

                if (!data.lectureId || !data.courseCode) {
                    throw new Error('Invalid QR code: Missing required fields');
                }

                const today = new Date().toISOString().split('T')[0];
                const currentTime = new Date().getTime();
                
                // Check if student already scanned for this lecture
                const attendanceRef = database.ref(`attendance/${data.lectureId}`);
                const existingSnapshot = await attendanceRef.orderByChild('studentId').equalTo(studentId).once('value');
                
                if (existingSnapshot.exists()) {
                    throw new Error('Attendance already recorded for this lecture.');
                }
                
                // Create unique record key
                const studentRecordKey = `student_${studentId}_${currentTime}`;
                
                // Save attendance record
                await attendanceRef.child(studentRecordKey).set({
                    studentId: studentId,
                    studentName: studentName,
                    courseCode: data.courseCode,
                    courseName: data.courseName || data.courseCode,
                    lectureId: data.lectureId,
                    date: today,
                    time: new Date().toLocaleTimeString(),
                    status: 'present',
                    room: data.room || 'Unknown',
                    timestamp: currentTime
                });

                console.log("✅ Attendance recorded successfully!");
                
                // Save locally
                const newRecord = {
                    id: studentRecordKey,
                    studentId: studentId,
                    studentName: studentName,
                    courseCode: data.courseCode,
                    courseName: data.courseName || data.courseCode,
                    date: today,
                    time: new Date().toLocaleTimeString(),
                    status: 'present',
                    room: data.room || 'Unknown',
                    timestamp: currentTime
                };
                
                attendanceRecords.unshift(newRecord);
                saveStudentData();
                
                // Show success message
                showResult('success', 'Attendance Recorded!', 
                    `Course: ${data.courseCode}<br>
                     Student: ${studentName} (${studentId})<br>
                     Time: ${formatTime(currentTime)}<br>
                     Status: ✅ ${translations[currentLanguage].presentStatus}`);
                     
                // Update local history
                loadAttendanceHistory();
                generateSummaryTable();
                   
            } catch (error) {
                console.error("❌ QR processing error:", error);
                // Reset cooldown on error
                scanCooldown = false;
                lastScannedCode = null;
                showResult('error', 'Scan Failed', error.message);
            }
        }

        // Payment functions
        function showPaymentForm(method) {
            currentPaymentMethod = method;
            document.getElementById('paymentModal').style.display = 'flex';
            
            // Reset forms
            document.getElementById('cardPaymentForm').style.display = 'none';
            document.getElementById('paystackPaymentForm').style.display = 'none';
            document.getElementById('payWithCardBtn').style.display = 'none';
            
            if (method === 'card') {
                document.getElementById('cardPaymentForm').style.display = 'block';
                document.getElementById('payWithCardBtn').style.display = 'block';
            } else if (method === 'paystack') {
                document.getElementById('paystackPaymentForm').style.display = 'block';
            }
        }

        function closePaymentModal() {
            document.getElementById('paymentModal').style.display = 'none';
            currentPaymentMethod = null;
        }

        async function processCardPayment() {
            const cardholderName = document.getElementById('cardholderName').value.trim();
            
            if (!cardholderName) {
                showResult('error', 'Missing Information', 'Please enter cardholder name.');
                return;
            }
            
            showResult('processing', 'Processing Payment', 'Please wait while we process your payment...');
            
            try {
                // Simulate payment processing
                const { paymentIntent, error } = await createPaymentIntent();
                
                if (error) {
                    throw new Error(error);
                }
                
                const { paymentError } = await stripe.confirmCardPayment(paymentIntent.client_secret, {
                    payment_method: {
                        card: cardElement,
                        billing_details: {
                            name: cardholderName,
                        },
                    }
                });
                
                if (paymentError) {
                    throw new Error(paymentError.message);
                }
                
                processSuccessfulPayment('card', paymentIntent.id);
                
            } catch (error) {
                console.error('Payment error:', error);
                showResult('error', 'Payment Failed', error.message || 'There was an error processing your payment. Please try again.');
            }
        }

        // Paystack Payment Processing
        function processPaystackPayment() {
            const email = document.getElementById('paystackEmail').value.trim();
            const phone = document.getElementById('paystackPhone').value.trim();
            
            if (!email) {
                showResult('error', 'Missing Information', 'Please enter your email address.');
                return;
            }

            // Validate email format
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                showResult('error', 'Invalid Email', 'Please enter a valid email address.');
                return;
            }

            // Check if Paystack key is configured
            if (!PAYSTACK_PUBLIC_KEY || PAYSTACK_PUBLIC_KEY === 'pk_test_your_paystack_public_key_here') {
                showResult('error', 'Payment Configuration', 'Paystack payment is not configured. Please contact support.');
                return;
            }

            // Generate unique reference
            const transactionRef = 'TXN_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            
            console.log('Initializing Paystack payment with key:', PAYSTACK_PUBLIC_KEY);
            
            try {
                // Initialize Paystack
                const handler = PaystackPop.setup({
                    key: PAYSTACK_PUBLIC_KEY,
                    email: email,
                    amount: SUBSCRIPTION_PRICE * 100, // Convert to kobo/cents
                    currency: 'USD',
                    ref: transactionRef,
                    metadata: {
                        custom_fields: [
                            {
                                display_name: "Student Name",
                                variable_name: "student_name",
                                value: document.getElementById('studentName').textContent
                            },
                            {
                                display_name: "Student ID",
                                variable_name: "student_id", 
                                value: document.getElementById('studentId').textContent
                            },
                            {
                                display_name: "Product",
                                variable_name: "product",
                                value: "SmartTendance Subscription"
                            }
                        ]
                    },
                    callback: function(response) {
                        // Payment was successful
                        console.log('Paystack payment successful:', response);
                        
                        // Verify payment (in production, this would call your backend)
                        verifyPaystackPayment(response.reference).then(verified => {
                            if (verified) {
                                processSuccessfulPayment('paystack', response.reference);
                                closePaymentModal();
                            } else {
                                showResult('error', 'Payment Verification Failed', 'We could not verify your payment. Please contact support.');
                            }
                        });
                    },
                    onClose: function() {
                        console.log('Paystack payment window closed');
                    }
                });
                
                // Open Paystack payment modal
                handler.openIframe();
                
            } catch (error) {
                console.error('Paystack initialization error:', error);
                showResult('error', 'Payment Error', 'Failed to initialize payment. Please try again.');
            }
        }

        // Verify Paystack payment (simulated - in production, call your backend)
        async function verifyPaystackPayment(reference) {
            return new Promise((resolve) => {
                setTimeout(() => {
                    // Simulate successful verification
                    console.log(`Verifying payment reference: ${reference}`);
                    resolve(true);
                }, 2000);
            });
        }

        // Simulate server-side payment intent creation
        async function createPaymentIntent() {
            return new Promise((resolve) => {
                setTimeout(() => {
                    resolve({
                        paymentIntent: {
                            id: 'pi_' + Math.random().toString(36).substr(2, 14),
                            client_secret: 'pi_' + Math.random().toString(36).substr(2, 14) + '_secret_' + Math.random().toString(36).substr(2, 24),
                            status: 'succeeded'
                        },
                        error: null
                    });
                }, 1500);
            });
        }

        function processSuccessfulPayment(method, paymentId) {
            closePaymentModal();
            
            const expiryDate = new Date();
            expiryDate.setMonth(expiryDate.getMonth() + SUBSCRIPTION_DURATION);
            
            localStorage.setItem('subscriptionType', 'paid');
            localStorage.setItem('subscriptionStatus', 'active');
            localStorage.setItem('subscriptionExpiry', expiryDate.toISOString());
            localStorage.setItem('subscriptionPaid', 'true');
            localStorage.setItem('lastPaymentMethod', method);
            localStorage.setItem('lastPaymentId', paymentId);
            localStorage.setItem('lastPaymentDate', new Date().toISOString());
            
            updateSubscriptionUI();
            
            showResult('success', 'Payment Successful!', 
                `Thank you for your payment!<br>
                 Your subscription is now active until ${formatDate(expiryDate)}.<br>
                 Payment ID: ${paymentId}`);
        }

        // Language change function
        function changeLanguage(lang, showMessage = true) {
            document.querySelectorAll('.language-option').forEach(option => {
                option.classList.remove('active');
            });
            
            document.querySelector(`.language-option[data-lang="${lang}"]`).classList.add('active');
            
            currentLanguage = lang;
            localStorage.setItem('language', lang);
            
            // Update all text content
            updateAllTextContent();
            
            // Update numbers and dates
            updateNumbersAndDates();
            
            if (showMessage) {
                showResult('success', 'Language Changed', `App language has been set to ${getLanguageName(lang)}`);
            }
        }

        function updateAllTextContent() {
            const langData = translations[currentLanguage];
            
            // Update all elements with translations
            Object.keys(langData).forEach(key => {
                const element = document.getElementById(key);
                if (element) {
                    element.textContent = langData[key];
                }
            });
        }

        function updateNumbersAndDates() {
            // Update trial days display
            const trialDaysLeft = document.getElementById('trialDaysLeft');
            if (trialDaysLeft) {
                const days = parseInt(trialDaysLeft.textContent);
                if (!isNaN(days)) {
                    trialDaysLeft.textContent = formatNumber(days);
                }
            }
            
            // Update subscription expiry date
            const expiresValue = document.getElementById('expiresValue');
            if (expiresValue) {
                const dateText = expiresValue.textContent;
                if (dateText && dateText !== 'Please Subscribe') {
                    expiresValue.textContent = formatDate(dateText);
                }
            }
            
            // Update subscription status
            updateSubscriptionUI();
            
            // Update summary table numbers
            generateSummaryTable();
            
            // Update attendance history dates and status
            loadAttendanceHistory();
        }

        function getLanguageName(code) {
            const languages = {
                'en': 'English',
                'es': 'Spanish', 
                'fr': 'French',
                'ar': 'Arabic',
                'zh': 'Chinese',
                'hi': 'Hindi'
            };
            return languages[code] || 'Unknown';
        }

        // Result modal functions
        function showResult(type, title, message) {
            const modal = document.getElementById('resultModal');
            const content = document.getElementById('resultContent');
            const icon = document.getElementById('resultIcon');
            const resultTitle = document.getElementById('resultTitle');
            const resultMessage = document.getElementById('resultMessage');
            
            content.className = `result-content ${type === 'success' ? 'result-success' : type === 'error' ? 'result-error' : ''}`;
            
            if (type === 'processing') {
                icon.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            } else {
                icon.textContent = type === 'success' ? '✅' : type === 'error' ? '❌' : 'ℹ️';
            }
            
            resultTitle.textContent = title;
            resultMessage.innerHTML = message;
            
            modal.style.display = 'flex';
        }

        function closeResult() {
            document.getElementById('resultModal').style.display = 'none';
        }

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', initApp);
        
        // Theme toggle
        document.getElementById('themeToggle').addEventListener('click', toggleTheme);
    </script>
</body>
</html>
